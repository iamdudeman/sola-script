var startTime = clock();
var a = "global a";
var b = "global b";
var c = "global c";

{
  var a = "outer a";
  var b = "outer b";

  {
    var a = "inner a";

    print a;
    print b;
    print c;
  }

  print a;
  print b;
  print c;
}

print a;
print b;
print c;

if (true) {
  print "true";
}

if (false) {
  print "false";
}

print nil or "hello";
print nil and "hello";

var count = 0;

while (count < 10) {
  print count;
  count = count + 1;
}

// manual Fibonacci
var a = 0;
var temp;

for (var i = 1; a < 10000; i = temp + i) {
  print a;
  temp = a;
  a = i;
}

fun greeting(name) {
  print "Hello " + name + "!";
}

greeting("Test Program");

fun fib(n) {
  if (n <= 1) return n;

  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}

fun makeCounter() {
  var i = 0;

  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();

counter();
counter();

// variable resolution bug test
var a = "global";

{
  fun showA() {
    print a;
  }

  showA();
  var a = "block";
  showA();
}

class DevonshireCream {
  init() {
    this.value = "Scones";
  }

  serveOn() {
    return this.value;
  }

  temp() {
    return this;
  }
}

print DevonshireCream;

var instance = DevonshireCream();

print instance;
instance.testField = "hello";
print instance.testField;
print instance.serveOn();
print instance.temp();

// Native function call
print "Script run in (ms)";
print clock() - startTime;
